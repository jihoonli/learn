一.数组和链表的区别
	从逻辑结构来看：
		（1）数组必须事先定义固定的长度（元素个数），不能适应数据动态地增减的情况。
		当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费；数组可以根据标直接存取。
		（2）链表动态地进行存储分配，可以适应数据动态地增减的情况，且可以方便地插入、删除数据项。
		（数组中插入、删除数据项时，需要移动其它数据项，非常繁琐）链表必须根据next指针找到下一个元素
		
	从内存存储来看：
		(1)(静态)数组从栈中分配空间, 对于程序员方便快速,但是自由度小
		(2)链表从堆中分配空间, 自由度大但是申请管理比较麻烦
		从上面的比较可以看出，如果需要快速访问数据，很少或不插入和删除元素，就应该用数组；
		相反， 如果需要经常插入和删除元素就需要用链表数据结构了。
二.链表的倒置
	头节点插入法:新建一个头结点，遍历原链表，把每个节点用头结点插入到新建链表中。最后，新建的链表就是反转后的链表。
	
三.判断一个链表是否有环
	对于这个问题我们可以采用“快慢指针”的方法。就是有两个指针fast和slow，开始的时候两个指针都指向链表头head，然后在每一步
	操作中slow向前走一步即：slow = slow->next，而fast每一步向前两步即：fast = fast->next->next。
	由于fast要比slow移动的快，如果有环，fast一定会先进入环，而slow后进入环。当两个指针都进入环之后，经过一定步的操作之后
	二者一定能够在环上相遇，并且此时slow还没有绕环一圈，也就是说一定是在slow走完第一圈之前相遇
	
链表经典面试题：http://blog.csdn.net/wu_george/article/details/20793929

四.什么是红黑树
	R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。

	红黑树的特性:
	（1）每个节点或者是黑色，或者是红色。
	（2）根节点是黑色。
	（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
	（4）如果一个节点是红色的，则它的子节点必须是黑色的。
	（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。
	
	红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。
	
五.赫夫曼树及其应用
	给定n个权值作为n个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。
	
	作用：文件压缩
	
	
	
	
	
	
	
	
	
	
	