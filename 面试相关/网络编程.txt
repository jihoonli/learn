一.Linux下C语言实现TCP服务器的初始化流程
	socket()   创建套接字
	bind() 	   绑定本机地址和端口号
	connect()  建立连接
	listen()   设置监听套接字
	accept()   接受TCP客户的连接

二.TCP/IP模型 和 OSI模型
	TPC/IP四层模型:
	应用层   :Telnet、FTP和email、HTTP
	运输层	 :TCP和UDP
	网络层	 :IP、ICMP和IGMP 、路由器
	链路层	 :设备驱动程序及接口卡
	
	OSI参考模型：
	应用层
	表示层
	会话层
	传输层
	网络层
	数据链路层
	物理层

三.TCP/IP四层模型以及每层有哪些协议

四.TCP与UDP区别
	1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接

	2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付

	3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的

	UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）

	4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信

	5、TCP首部开销20字节;UDP的首部开销小，只有8个字节
	6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道
	
五.IP地址和端口相关知识

六.服务器模型有哪几种
	1.同步阻塞迭代模型
	2.多进程并发模型
	3.多线程并发模型
	4.IO多路复用(elect poll epoll)
	
七.并发服务器的实现有几种机制
	TCP多进程并发服务器
	TCP 并发服务器的思想是每一个客户机的请求并不由服务器直接处理，而是由服务器创建一个子进程来处理。
	
	多线程服务器
	多线程服务器是对多进程的服务器的改进，由于多进程服务器在创建进程时要消耗较大的系统资源，所以用线程来取代进程，这样服务处理程序可以较快的创建。
	据统计，创建线程与创建进程要快 10100 倍，所以又把线程称为“轻量级”进程。线程与进程不同的是：一个进程内的所有线程共享相同的全局内存、全局变量等信息，这种机制又带来了同步问题。
	
	I/O复用服务器
	I/O 复用技术是为了解决进程或线程阻塞到某个 I/O 系统调用而出现的技术，使进程不阻塞于某个特定的 I/O 系统调用。它也可用于并发服务器的设计，常用函数 select() 或 epoll() 来实现。
	
八.select poll epoll的区别
	https://blog.csdn.net/huangyimo/article/details/73721134
	http://www.cnblogs.com/Anker/p/3265058.html
	
九.断点续传
	比如现在有ABCDEFGH八个字母，我要对着再抄一份（这里比喻传输过程），我就看一眼A，在新纸上写下A，当写到D的时候笔没水了，这时我只要记下我已经写4个字母，下次继续写的时候，我就跳过4个字母，从E继续抄写，并且是写在上次的D后面，当我抄完剩下EFGH四个字母时，我们就完成了抄写工作。

十.什么是粘包，如何解决粘包？
	服务端与客户端没有约定好要使用的数据结构。
	Socket Client实际是将数据包发送到一个缓存buffer中，通过buffer刷到数据链路层。因服务端接收数据包时，
	不能断定数据包1何时结束，就有可能出现数据包2的部分数据结合数据包1发送出去，
	导致服务器读取数据包1时包含了数据包2的数据。这种现象称为粘包。
	
	在消息的尾部加一些特殊字符，那么在读取数据的时候，只要读到这个特殊字符，就认为已经可以截取一个完整的数据包了

	

	
	
	
	
	
	
	
	
	